{
  "address": "0x2101267105BB5A84A9486329FEBFDc9441f6A54b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3a26742e96975bc2fee9659ef41bdd69c57e5da907a500bf0dd54ecdd6cfcc72",
  "receipt": {
    "to": null,
    "from": "0x13A19933267ec307c96f3dE8Ff8A2392C39263EB",
    "contractAddress": "0x2101267105BB5A84A9486329FEBFDc9441f6A54b",
    "transactionIndex": 18,
    "gasUsed": "1042613",
    "logsBloom": "0x
    "blockHash": "0x270803a8bc2da83425050ba8325b2cd79bf6fdc54a764877a9333f75d6af8a21",
    "transactionHash": "0x3a26742e96975bc2fee9659ef41bdd69c57e5da907a500bf0dd54ecdd6cfcc72",
    "logs": [],
    "blockNumber": 11377965,
    "cumulativeGasUsed": "3997895",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e"
  ],
  "numDeployments": 5,
  "solcInputHash": "1464ed3559482cd0696e409ecb528895",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Kihiu Frank\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// IF YOU GOING THROUGH THIS CODE, SORRY FOR THE MANY COMMENTS.\\n// THEY ARE THERE FOR LEARNING/REFERENCE PURPOSES.\\n// READABILITY WAS NOT A PRIORITY IN THIS CASE.\\n\\n//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\\n//Get Funds From Users\\n//Withdraw Funds\\n//Set a minimum funding value in USD\\n\\n// SPDX-License-Identifier: GPL-3.0\\n// 1. Pragma\\npragma solidity ^0.8.7;\\n// 2. Imports\\nimport \\\"./PriceConverter.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// 3. Interfaces, Libraries, Contracts\\nerror FundMe__NotOwner();\\n\\n/** @title A contract for crowd funding\\n * @author Kihiu Frank\\n * @notice This contract is to demo a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // State variables\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address private immutable i_owner;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    // Events (we have none!)\\n\\n    // Modifiers\\n    modifier onlyOwner() {\\n        //require(msg.sender == i_owner, \\\"Sender is not owner\\\");\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    // Functions Order:\\n    //// constructor\\n    //// receive\\n    //// fallback\\n    //// external\\n    //// public\\n    //// internal\\n    //// private\\n    //// view / pure\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    //What happens if someone sends this contract ETH without calling fund()?\\n    //receive()\\n    //fallback()\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /**\\n     * @notice This function funds this contract\\n     * @dev This implements price feeds as our library\\n     */\\n    function fund() public payable {\\n        //Want to be able to set minimum fund amount in USD\\n        // 1. How do we send ETH to this contract\\n\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"Didn't send enough!\\\" //error message if require fails\\n        ); // 1e18 = 1*10 ** 18 == 1000000000000000000\\n        // this has 18 decimals\\n\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        /* starting Index, ending index, step amount */\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        //reset the array\\n        s_funders = new address[](0);\\n\\n        /*        // withdrawing the funds (#WAYS)\\n        // 1. Transfer (capped at 2300 gas, throws error)\\n        //msg.sender = address     // payable(msg.sender) = payable address\\n        payable(msg.sender).transfer(address(this).balance);\\n        // 2. Send (capped at 2300 gas, returns bool)\\n        bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        require(sendSuccess, \\\"Send Failed!\\\");\\n*/\\n\\n        // 3. Call (forward all gas or set gas, returns bool)\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call Failed!\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n\\n        //mappings can't be in memory\\n\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        //reset the array\\n        s_funders = new address[](0);\\n\\n        // 3. Call (forward all gas or set gas, returns bool)\\n        (bool callSuccess, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call Failed!\\\");\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunders(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x00c214adefdf14fd41a0ad7c80efa47c36d129453bc1ebdf668ebbed0eed5c49\",\"license\":\"GPL-3.0\"},\"contracts/PriceConverter.sol\":{\"content\":\"//library Lesson\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        //(uint80 roundId, int256 price, uint startedAt, uint timeStamp, uint80 answeredInRound) = priceFeed.latestRoundData();\\n\\n        // SAME AS ABOVE. We skipped them (but left commas) since we only need the price.\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        // ETH in terms of USD\\n        // 1500.00000000\\n\\n        return uint256(price * 1e10); // 1**10 == 10000000000\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x65d32e9a12cea3c3d999f7ac58489cdca2e219d99be0d275299f05c469553d5d\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001306380380620013068339818101604052810190620000379190620000cd565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600081519050620000c78162000138565b92915050565b600060208284031215620000e657620000e562000133565b5b6000620000f684828501620000b6565b91505092915050565b60006200010c8262000113565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200014381620000ff565b81146200014f57600080fd5b50565b60805160601c611180620001866000396000818161038b015281816105da0152818161062a015261082001526111806000f3fe60806040526004361061007f5760003560e01c8063893d20e81161004e578063893d20e8146101545780639e87a5cd1461017f578063b60d4288146101aa578063be2693f0146101b45761008e565b80630343fb25146100985780633a7b6c74146100d55780633ccfd60b146101125780636b69a592146101295761008e565b3661008e5761008c6101be565b005b6100966101be565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610ad8565b6102f9565b6040516100cc9190610cce565b60405180910390f35b3480156100e157600080fd5b506100fc60048036038101906100f79190610b05565b610342565b6040516101099190610c58565b60405180910390f35b34801561011e57600080fd5b50610127610389565b005b34801561013557600080fd5b5061013e6105c9565b60405161014b9190610cce565b60405180910390f35b34801561016057600080fd5b506101696105d6565b6040516101769190610c58565b60405180910390f35b34801561018b57600080fd5b506101946105fe565b6040516101a19190610c73565b60405180910390f35b6101b26101be565b005b6101bc610628565b005b6802b5e3af16b18800006101fd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108ec90919063ffffffff16565b101561023e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023590610c8e565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102f09190610d05565b92505081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080828154811061035757610356611036565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461040e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104b957600080828154811061043357610432611036565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104b190610f8f565b915050610411565b50600067ffffffffffffffff8111156104d5576104d4611065565b5b6040519080825280602002602001820160405280156105035781602001602082028036833780820191505090505b50600090805190602001906105199291906109c8565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161054090610c43565b60006040518083038185875af1925050503d806000811461057d576040519150601f19603f3d011682016040523d82523d6000602084013e610582565b606091505b50509050806105c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bd90610cae565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106ad576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561073057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106e6575b5050505050905060005b81518110156107bb57600082828151811061075857610757611036565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107b390610f8f565b91505061073a565b50600067ffffffffffffffff8111156107d7576107d6611065565b5b6040519080825280602002602001820160405280156108055781602001602082028036833780820191505090505b506000908051906020019061081b9291906109c8565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161086290610c43565b60006040518083038185875af1925050503d806000811461089f576040519150601f19603f3d011682016040523d82523d6000602084013e6108a4565b606091505b50509050806108e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108df90610cae565b60405180910390fd5b5050565b6000806108f883610928565b90506000670de0b6b3a764000085836109119190610ea3565b61091b9190610d5b565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561097157600080fd5b505afa158015610985573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a99190610b32565b5050509150506402540be400816109c09190610d8c565b915050919050565b828054828255906000526020600020908101928215610a41579160200282015b82811115610a405782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109e8565b5b509050610a4e9190610a52565b5090565b5b80821115610a6b576000816000905550600101610a53565b5090565b600081359050610a7e816110ee565b92915050565b600081519050610a9381611105565b92915050565b600081359050610aa88161111c565b92915050565b600081519050610abd8161111c565b92915050565b600081519050610ad281611133565b92915050565b600060208284031215610aee57610aed611094565b5b6000610afc84828501610a6f565b91505092915050565b600060208284031215610b1b57610b1a611094565b5b6000610b2984828501610a99565b91505092915050565b600080600080600060a08688031215610b4e57610b4d611094565b5b6000610b5c88828901610ac3565b9550506020610b6d88828901610a84565b9450506040610b7e88828901610aae565b9350506060610b8f88828901610aae565b9250506080610ba088828901610ac3565b9150509295509295909350565b610bb681610efd565b82525050565b610bc581610f59565b82525050565b6000610bd8600083610ce9565b9150610be382611099565b600082019050919050565b6000610bfb601383610cf4565b9150610c068261109c565b602082019050919050565b6000610c1e600c83610cf4565b9150610c29826110c5565b602082019050919050565b610c3d81610f39565b82525050565b6000610c4e82610bcb565b9150819050919050565b6000602082019050610c6d6000830184610bad565b92915050565b6000602082019050610c886000830184610bbc565b92915050565b60006020820190508181036000830152610ca781610bee565b9050919050565b60006020820190508181036000830152610cc781610c11565b9050919050565b6000602082019050610ce36000830184610c34565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610d1082610f39565b9150610d1b83610f39565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d5057610d4f610fd8565b5b828201905092915050565b6000610d6682610f39565b9150610d7183610f39565b925082610d8157610d80611007565b5b828204905092915050565b6000610d9782610f0f565b9150610da283610f0f565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610de157610de0610fd8565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610e1e57610e1d610fd8565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e5b57610e5a610fd8565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e9857610e97610fd8565b5b828202905092915050565b6000610eae82610f39565b9150610eb983610f39565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ef257610ef1610fd8565b5b828202905092915050565b6000610f0882610f19565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610f6482610f6b565b9050919050565b6000610f7682610f7d565b9050919050565b6000610f8882610f19565b9050919050565b6000610f9a82610f39565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610fcd57610fcc610fd8565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b50565b7f4469646e27742073656e6420656e6f7567682100000000000000000000000000600082015250565b7f43616c6c204661696c6564210000000000000000000000000000000000000000600082015250565b6110f781610efd565b811461110257600080fd5b50565b61110e81610f0f565b811461111957600080fd5b50565b61112581610f39565b811461113057600080fd5b50565b61113c81610f43565b811461114757600080fd5b5056fea264697066735822122023b5133a7bd08d33dbd25385929bee8c4f11382f7fef8a4c6b6f2ef6d7e9e78a64736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c8063893d20e81161004e578063893d20e8146101545780639e87a5cd1461017f578063b60d4288146101aa578063be2693f0146101b45761008e565b80630343fb25146100985780633a7b6c74146100d55780633ccfd60b146101125780636b69a592146101295761008e565b3661008e5761008c6101be565b005b6100966101be565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610ad8565b6102f9565b6040516100cc9190610cce565b60405180910390f35b3480156100e157600080fd5b506100fc60048036038101906100f79190610b05565b610342565b6040516101099190610c58565b60405180910390f35b34801561011e57600080fd5b50610127610389565b005b34801561013557600080fd5b5061013e6105c9565b60405161014b9190610cce565b60405180910390f35b34801561016057600080fd5b506101696105d6565b6040516101769190610c58565b60405180910390f35b34801561018b57600080fd5b506101946105fe565b6040516101a19190610c73565b60405180910390f35b6101b26101be565b005b6101bc610628565b005b6802b5e3af16b18800006101fd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108ec90919063ffffffff16565b101561023e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023590610c8e565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102f09190610d05565b92505081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080828154811061035757610356611036565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461040e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104b957600080828154811061043357610432611036565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104b190610f8f565b915050610411565b50600067ffffffffffffffff8111156104d5576104d4611065565b5b6040519080825280602002602001820160405280156105035781602001602082028036833780820191505090505b50600090805190602001906105199291906109c8565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161054090610c43565b60006040518083038185875af1925050503d806000811461057d576040519150601f19603f3d011682016040523d82523d6000602084013e610582565b606091505b50509050806105c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bd90610cae565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106ad576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561073057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106e6575b5050505050905060005b81518110156107bb57600082828151811061075857610757611036565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107b390610f8f565b91505061073a565b50600067ffffffffffffffff8111156107d7576107d6611065565b5b6040519080825280602002602001820160405280156108055781602001602082028036833780820191505090505b506000908051906020019061081b9291906109c8565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161086290610c43565b60006040518083038185875af1925050503d806000811461089f576040519150601f19603f3d011682016040523d82523d6000602084013e6108a4565b606091505b50509050806108e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108df90610cae565b60405180910390fd5b5050565b6000806108f883610928565b90506000670de0b6b3a764000085836109119190610ea3565b61091b9190610d5b565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561097157600080fd5b505afa158015610985573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a99190610b32565b5050509150506402540be400816109c09190610d8c565b915050919050565b828054828255906000526020600020908101928215610a41579160200282015b82811115610a405782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109e8565b5b509050610a4e9190610a52565b5090565b5b80821115610a6b576000816000905550600101610a53565b5090565b600081359050610a7e816110ee565b92915050565b600081519050610a9381611105565b92915050565b600081359050610aa88161111c565b92915050565b600081519050610abd8161111c565b92915050565b600081519050610ad281611133565b92915050565b600060208284031215610aee57610aed611094565b5b6000610afc84828501610a6f565b91505092915050565b600060208284031215610b1b57610b1a611094565b5b6000610b2984828501610a99565b91505092915050565b600080600080600060a08688031215610b4e57610b4d611094565b5b6000610b5c88828901610ac3565b9550506020610b6d88828901610a84565b9450506040610b7e88828901610aae565b9350506060610b8f88828901610aae565b9250506080610ba088828901610ac3565b9150509295509295909350565b610bb681610efd565b82525050565b610bc581610f59565b82525050565b6000610bd8600083610ce9565b9150610be382611099565b600082019050919050565b6000610bfb601383610cf4565b9150610c068261109c565b602082019050919050565b6000610c1e600c83610cf4565b9150610c29826110c5565b602082019050919050565b610c3d81610f39565b82525050565b6000610c4e82610bcb565b9150819050919050565b6000602082019050610c6d6000830184610bad565b92915050565b6000602082019050610c886000830184610bbc565b92915050565b60006020820190508181036000830152610ca781610bee565b9050919050565b60006020820190508181036000830152610cc781610c11565b9050919050565b6000602082019050610ce36000830184610c34565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610d1082610f39565b9150610d1b83610f39565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d5057610d4f610fd8565b5b828201905092915050565b6000610d6682610f39565b9150610d7183610f39565b925082610d8157610d80611007565b5b828204905092915050565b6000610d9782610f0f565b9150610da283610f0f565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610de157610de0610fd8565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610e1e57610e1d610fd8565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e5b57610e5a610fd8565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e9857610e97610fd8565b5b828202905092915050565b6000610eae82610f39565b9150610eb983610f39565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ef257610ef1610fd8565b5b828202905092915050565b6000610f0882610f19565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610f6482610f6b565b9050919050565b6000610f7682610f7d565b9050919050565b6000610f8882610f19565b9050919050565b6000610f9a82610f39565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610fcd57610fcc610fd8565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b50565b7f4469646e27742073656e6420656e6f7567682100000000000000000000000000600082015250565b7f43616c6c204661696c6564210000000000000000000000000000000000000000600082015250565b6110f781610efd565b811461110257600080fd5b50565b61110e81610f0f565b811461111957600080fd5b50565b61112581610f39565b811461113057600080fd5b50565b61113c81610f43565b811461114757600080fd5b5056fea264697066735822122023b5133a7bd08d33dbd25385929bee8c4f11382f7fef8a4c6b6f2ef6d7e9e78a64736f6c63430008070033",
  "devdoc": {
    "author": "Kihiu Frank",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feeds as our library"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds this contract"
      }
    },
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 63,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 67,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 72,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}